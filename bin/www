#!/usr/bin/env node

// Require app and try to access valid routes
let app = require('../app')

// Catch 404 error in case no route matches and render not-found template
app.use((req, res) => res.status(404).json({ message: 'Not found' }))

// Catch 500 error in case of server error, log it and render error template
app.use((err, req, res) => {
  console.error('Server error:', req.method, req.path, err)
  if (!res.headersSent) {
    res.status(500).json({ message: 'Server error' })
  }
})

const http = require('http')
let server = http.createServer(app)

// Handle and log specific listen errors
server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
})

// Go!
server.listen(process.env.PORT, () => console.log(`Listening on http://localhost:${process.env.PORT}`))